class TestCase::Math::Complex {
  use Math::Complex;
  use Math;
  use Fn;

  static method test_complexf : int () {
    my $z1 = Math->complex(0.5f, 0.25f);

    unless ($z1->{re} == 0.5f && $z1->{im} == 0.25f) {
      return 0;
    }

    return 1;
  }


  static method test_complex : int () {
    my $z1 = Math->complex(0.00000000005, 0.000000000025);

    unless ($z1->{re} == 0.00000000005 && $z1->{im} == 0.000000000025) {
      return 0;
    }

    return 1;
  }

  static method test_caddf : int () {
    my $z1 : Complex_2f;
    $z1->{re} = 0.5f;
    $z1->{im} = 0.25f;

    my $z2 : Complex_2f;
    $z2->{re} = 0.125f;
    $z2->{im} = 0.0625f;

    my $z3 = Math->caddf($z1, $z2);

    unless ($z3->{re} == 0.625 && $z3->{im} == 0.3125) {
      return 0;
    }

    return 1;
  }

  static method test_cadd : int () {
    my $z1 : Complex_2d;
    $z1->{re} = 0.00000000005;
    $z1->{im} = 0.000000000025;

    my $z2 : Complex_2d;
    $z2->{re} = 0.0000000000125;
    $z2->{im} = 0.00000000000625;

    my $z3 = Math->cadd($z1, $z2);

    unless ($z3->{re} == 0.0000000000625 && $z3->{im} == 0.00000000003125) {
      return 0;
    }

    return 1;
  }

  static method test_csubf : int () {
    my $z1 : Complex_2f;
    $z1->{re} = 0.5f;
    $z1->{im} = 0.25f;

    my $z2 : Complex_2f;
    $z2->{re} = 0.125f;
    $z2->{im} = 0.0625f;

    my $z3 = Math->csubf($z1, $z2);

    unless ($z3->{re} == 0.5f - 0.125f && $z3->{im} == 0.25f - 0.0625f) {
      return 0;
    }

    return 1;
  }

  static method test_csub : int () {
    my $z1 : Complex_2d;
    $z1->{re} = 0.5;
    $z1->{im} = 0.25;

    my $z2 : Complex_2d;
    $z2->{re} = 0.125;
    $z2->{im} = 0.625;

    my $z3 = Math->csub($z1, $z2);

    unless ($z3->{re} == 0.5 - 0.125 && $z3->{im} == 0.25 - 0.625) {
      return 0;
    }

    return 1;
  }

  static method test_cmulf : int () {
    my $eps = 0.001f;

    my $z1 : Complex_2f;
    $z1->{re} = 0.5f;
    $z1->{im} = 0.25f;

    my $z2 : Complex_2f;
    $z2->{re} = 0.125f;
    $z2->{im} = 0.0625f;

    my $z3 = Math->cmulf($z1, $z2);

    unless ($z3->{re} == 0.046875 && $z3->{im} == 0.0625) {
      return 0;
    }

    return 1;
  }

  static method test_cmul : int () {
    my $eps = 0.1;

    my $z1 : Complex_2d;
    $z1->{re} = 0.5;
    $z1->{im} = 0.25;

    my $z2 : Complex_2d;
    $z2->{re} = 0.125;
    $z2->{im} = 0.0625;

    my $z3 = Math->cmul($z1, $z2);

    unless ($z3->{re} == 0.046875 && $z3->{im} == 0.0625) {
      return 0;
    }

    return 1;
  }

  static method test_cscamulf : int () {
    my $z1 = -0.5f;

    my $z2 : Complex_2f;
    $z2->{re} = -0.1f;
    $z2->{im} = 0.05f;

    my $z3 = Math->cscamulf($z1, $z2);
    
    unless ($z3->{re} == 0.05f) {
      return 0;
    }
    
    unless ($z3->{im} == -0.025f) {
      return 0;
    }

    return 1;
  }

  static method test_cscamul : int () {
    my $z1 = 0.001;

    my $z2 : Complex_2d;
    $z2->{re} = -1.0;
    $z2->{im} = 3.0;

    my $z3 = Math->cscamul($z1, $z2);

    unless ($z3->{re} == -0.001) {
      return 0;
    }
    
    unless ($z3->{im} == 0.003) {
      return 0;
    }

    return 1;
  }

  static method test_cdivf : int () {
    my $z1 : Complex_2f;
    $z1->{re} = 0.5f;
    $z1->{im} = 0.25f;

    my $z2 : Complex_2f;
    $z2->{re} = 2f;
    $z2->{im} = -2f;

    my $z3 = Math->cdivf($z1, $z2);
    
    unless ($z3->{re} == 0.0625 && $z3->{im} == 0.1875) {
      return 0;
    }

    return 1;
  }

  static method test_cdiv : int () {
    my $z1 : Complex_2d;
    $z1->{re} = 0.5f;
    $z1->{im} = 0.25f;

    my $z2 : Complex_2d;
    $z2->{re} = 2f;
    $z2->{im} = -2f;

    my $z3 = Math->cdiv($z1, $z2);

    unless ($z3->{re} == 0.0625 && $z3->{im} == 0.1875) {
      return 0;
    }

    return 1;
  }

  static method test_cacos : int () {
    my $z1 : Complex_2d;
    $z1->{re} = 0.5;
    $z1->{im} = 0.25;

    my $z_out = Math->cacos($z1);
    
    unless ($z_out->{re} > 1.06918 && $z_out->{re} < 1.06919) {
      return 0;
    }
    
    unless ($z_out->{im} > -0.281397 && $z_out->{im} < -0.281396) {
      return 0;
    }

    return 1;
  }

  static method test_cacosf : int () {
    my $z1 : Complex_2f;
    $z1->{re} = 0.5f;
    $z1->{im} = 0.25f;

    my $z_out = Math->cacosf($z1);
    
    unless ($z_out->{re} > 1.06918f && $z_out->{re} < 1.06919f) {
      return 0;
    }

    unless ($z_out->{im} > -0.28140f && $z_out->{im} < -0.28139f) {
      return 0;
    }

    return 1;
  }

  static method test_casin : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->casin($z1);
    
    unless ($z_out->{re} > 0.5016088532755 && $z_out->{re} < 0.5016088532756) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2813960562452 && $z_out->{im} < 0.2813960562453) {
      return 0;
    }

    return 1;
  }

  static method test_casinf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->casinf($z1);
    
    unless ($z_out->{re} > 0.5016 && $z_out->{re} < 0.5017) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2813 && $z_out->{im} < 0.2814) {
      return 0;
    }

    return 1;
  }

  static method test_catan : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->catan($z1);
    
    unless ($z_out->{re} > 0.4842544903299 && $z_out->{re} < 0.4842544903300) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2005866181312 && $z_out->{im} < 0.2005866181313) {
      return 0;
    }

    return 1;
  }

  static method test_catanf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->catanf($z1);
    
    unless ($z_out->{re} > 0.4842 && $z_out->{re} < 0.4843) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2005 && $z_out->{im} < 0.2006) {
      return 0;
    }

    return 1;
  }

  static method test_ccos : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->ccos($z1);
    
    unless ($z_out->{re} > 0.9051501505596 && $z_out->{re} < 0.9051501505597) {
      return 0;
    }
    
    unless ($z_out->{im} > -0.1211087960439 && $z_out->{im} < -0.1211087960438) {
      return 0;
    }

    return 1;
  }

  static method test_ccosf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->ccosf($z1);
    
    unless ($z_out->{re} > 0.905 && $z_out->{re} < 0.906) {
      return 0;
    }
    
    unless ($z_out->{im} > -0.1212 && $z_out->{im} < -0.1211) {
      return 0;
    }

    return 1;
  }

  static method test_csin : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->csin($z1);
    
    unless ($z_out->{re} > 0.4944857809331 && $z_out->{re} < 0.4944857809332) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2216881641495 && $z_out->{im} < 0.2216881641496) {
      return 0;
    }

    return 1;
  }

  static method test_csinf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->csinf($z1);
    
    unless ($z_out->{re} > 0.4944 && $z_out->{re} < 0.4945) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2216 && $z_out->{im} < 0.2217) {
      return 0;
    }

    return 1;
  }

  static method test_ctan : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->ctan($z1);
    
    unless ($z_out->{re} > 0.5045007026985 && $z_out->{re} < 0.5045007026986) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.3124206925025 && $z_out->{im} < 0.3124206925026) {
      return 0;
    }

    return 1;
  }

  static method test_ctanf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->ctanf($z1);
    
    unless ($z_out->{re} > 0.5045 && $z_out->{re} < 0.5046) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.3124 && $z_out->{im} < 0.3125) {
      return 0;
    }

    return 1;
  }

  static method test_cacosh : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->cacosh($z1);
    
    unless ($z_out->{re} > 0.2813960562452 && $z_out->{re} < 0.2813960562453) {
      return 0;
    }
    
    unless ($z_out->{im} > 1.06918747351 && $z_out->{im} < 1.06918747352) {
      return 0;
    }

    return 1;
  }

  static method test_cacoshf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->cacoshf($z1);
    
    unless ($z_out->{re} > 0.2813 && $z_out->{re} < 0.2814) {
      return 0;
    }
    
    unless ($z_out->{im} > 1.0691 && $z_out->{im} < 1.0692) {
      return 0;
    }

    return 1;
  }

  static method test_casinh : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->casinh($z1);
    
    unless ($z_out->{re} > 0.4926756834207 && $z_out->{re} < 0.4926756834208) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2243284526346 && $z_out->{im} < 0.2243284526347) {
      return 0;
    }

    return 1;
  }

  static method test_casinhf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->casinhf($z1);
    
    unless ($z_out->{re} > 0.4926 && $z_out->{re} < 0.4927) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2243 && $z_out->{im} < 0.2244) {
      return 0;
    }

    return 1;
  }

  static method test_catanh : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->catanh($z1);
    
    unless ($z_out->{re} > 0.5003700000525 && $z_out->{re} < 0.5003700000526) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.3143981432077 && $z_out->{im} < 0.3143981432078) {
      return 0;
    }

    return 1;
  }

  static method test_catanhf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->catanhf($z1);
    
    unless ($z_out->{re} > 0.5003 && $z_out->{re} < 0.5004) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.3143 && $z_out->{im} < 0.3144) {
      return 0;
    }

    return 1;
  }

  static method test_ccosh : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->ccosh($z1);
    
    unless ($z_out->{re} > 1.092570804731 && $z_out->{re} < 1.092570804732) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.1289210417280 && $z_out->{im} < 0.1289210417281) {
      return 0;
    }

    return 1;
  }

  static method test_ccoshf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->ccoshf($z1);
    
    unless ($z_out->{re} > 1.092 && $z_out->{re} < 1.093) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.1289 && $z_out->{im} < 0.1290) {
      return 0;
    }

    return 1;
  }

  static method test_csinh : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->csinh($z1);
    
    unless ($z_out->{re} > 0.5048957143879 && $z_out->{re} < 0.5048957143880) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2789791283502 && $z_out->{im} < 0.2789791283503) {
      return 0;
    }

    return 1;
  }

  static method test_csinhf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->csinhf($z1);
    
    unless ($z_out->{re} > 0.5048 && $z_out->{re} < 0.5049) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2789 && $z_out->{im} < 0.2790) {
      return 0;
    }

    return 1;
  }

  static method test_ctanh : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->ctanh($z1);
    
    unless ($z_out->{re} > 0.4854872810241 && $z_out->{re} < 0.4854872810242) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.198055449951 && $z_out->{im} < 0.198055449952) {
      return 0;
    }

    return 1;
  }

  static method test_ctanhf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->ctanhf($z1);
    
    unless ($z_out->{re} > 0.4854 && $z_out->{re} < 0.4855) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.1980 && $z_out->{im} < 0.1981) {
      return 0;
    }

    return 1;
  }

  static method test_clog : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->clog($z1);
    
    unless ($z_out->{re} > -0.581575404903 && $z_out->{re} < -0.581575404902) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.4636476090008 && $z_out->{im} < 0.4636476090009) {
      return 0;
    }

    return 1;
  }

  static method test_clogf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->clogf($z1);
    
    unless ($z_out->{re} > -0.5816 && $z_out->{re} < -0.5815) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.4636 && $z_out->{im} < 0.4637) {
      return 0;
    }

    return 1;
  }

  static method test_cabs : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->cabs($z1);
    
    unless ($z_out > 0.5590169943749 && $z_out < 0.5590169943750) {
      return 0;
    }

    return 1;
  }

  static method test_cabsf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->cabsf($z1);
    
    unless ($z_out > 0.5590 && $z_out < 0.5591) {
      return 0;
    }

    return 1;
  }

  static method test_carg : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->carg($z1);
    
    unless ($z_out > 0.463647609000 && $z_out < 0.463647609001) {
      return 0;
    }

    return 1;
  }

  static method test_cargf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->cargf($z1);
    
    unless ($z_out > 0.4636 && $z_out < 0.4637) {
      return 0;
    }

    return 1;
  }

  static method test_conj : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->conj($z1);
    
    unless ($z_out->{re} == 0.5) {
      return 0;
    }
    
    unless ($z_out->{im} == -0.25) {
      return 0;
    }

    return 1;
  }

  static method test_conjf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->conjf($z1);
    
    unless ($z_out->{re} == 0.5f) {
      return 0;
    }
    
    unless ($z_out->{im} == -0.25f) {
      return 0;
    }

    return 1;
  }


  static method test_csqrt : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->csqrt($z1);
    
    unless ($z_out->{re} > 0.72767334511267 && $z_out->{re} < 0.72767334511268) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.17178037486 && $z_out->{im} < 0.17178037487) {
      return 0;
    }

    return 1;
  }

  static method test_csqrtf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->csqrtf($z1);
    
    unless ($z_out->{re} > 0.7276 && $z_out->{re} < 0.7277) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.1717 && $z_out->{im} < 0.1718) {
      return 0;
    }

    return 1;
  }

  static method test_cpow : int () {
    my $z1 = Math->complex(0.5, 0.25);
    my $z2 = Math->complex(1.5, 1.25);

    my $z_out = Math->cpow($z1, $z2);
    
    unless ($z_out->{re} > 0.2340036050149 && $z_out->{re} < 0.2340036050150) {
      return 0;
    }
    
    unless ($z_out->{im} > -0.007373047187613 && $z_out->{im} < -0.007373047187612) {
      return 0;
    }

    return 1;
  }

  static method test_cpowf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);
    my $z2 = Math->complexf(1.5f, 1.25f);

    my $z_out = Math->cpowf($z1, $z2);
    
    unless ($z_out->{re} > 0.2340 && $z_out->{re} < 0.2341) {
      return 0;
    }
    
    unless ($z_out->{im} > -0.0074 && $z_out->{im} < -0.0073) {
      return 0;
    }

    return 1;
  }

  static method test_cexp : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->cexp($z1);
    unless ($z_out->{re} > 1.5974665191199 && $z_out->{re} < 1.5974665191200) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.407900170078 && $z_out->{im} < 0.407900170079) {
      return 0;
    }

    return 1;
  }

  static method test_cexpf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->cexpf($z1);
    
    unless ($z_out->{re} > 1.5974 && $z_out->{re} < 1.5975) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.4079 && $z_out->{im} < 0.4080) {
      return 0;
    }

    return 1;
  }

}
